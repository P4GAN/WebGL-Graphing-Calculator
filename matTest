
//returns 2x2 matrix representing cofactor of 3x3 matrix after row and column are removed
function cofactor(m, row, column) {
    let cofactor = []
    for (let rowCheck = 0; rowCheck < 3; rowCheck++) {
        for (let columnCheck = 0; columnCheck < 3; columnCheck++) {
            if (rowCheck != row && columnCheck != column) {
                cofactor.push(m[rowCheck * 3 + columnCheck]);
            }
        }
    }
    sign = (-1) ** (row * 3 + column)

    return sign * (cofactor[0] * cofactor[3] - cofactor[1] * cofactor[2]);
}

//finds inverse of 3x3 matrix using matrix of cofactors
function inverse(m) {
    let minorMatrix = []
    let determinant = 0;
    //loop through first row to determine determinant
    //determinant = a * cofactorA + b * cofactorB + c * cofactorC
    for (let i = 0; i < 3; i++) {
        determinant += cofactor(m, 0, i) * m[i];
    }
    for (let row = 0; row < 3; row++) {
        for (let column = 0; column < 3; column++) {
            let cofactorValue = cofactor(m, row, column);
            minorMatrix[row + column * 3] = cofactorValue / determinant //transposes matrix, swap columns with rows
        }
        
    }
    return minorMatrix;
}

function determinant(m) {
    let determinant = 0;
    for (let i = 0; i < 3; i++) {
        determinant += cofactor(m, 0, i) * m[i];
    }
    return determinant;
}

console.time('test');
let matrix1 = [];
let matrix2 = [];
for (let j = 0; j < 9; j++) {

    matrix1.push(Math.random());
    matrix2.push(Math.random());
}
function test() {
    for (let i = 0; i < 10000000; i++) {

        multiply2(matrix1, matrix2);

    }
}
test();
console.timeEnd('test');
